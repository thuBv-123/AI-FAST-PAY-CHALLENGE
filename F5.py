import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
import glob, os, json, unicodedata
import numpy as np
import cv2
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from ultralytics import YOLO
import requests
from io import BytesIO
import threading

def start_webcam():
    while True:
        # Nh·∫≠n di·ªán m√≥n ƒÉn
        capture_from_webcam()

thread = threading.Thread(target=start_webcam)
thread.daemon = True
thread.start()  # Ch·∫°y tr√™n lu·ªìng ri√™ng ƒë·ªÉ tr√°nh lag giao di·ªán ch√≠nh
# === Load m√¥ h√¨nh YOLO v√† CNN ===
model = YOLO('yolov10n.pt')
cnn_model = load_model('cnn_model1.keras')

classes = ['canh c·∫£i', 'canh chua', 'c√° h√∫ kho', 'c∆°m', 'g√† chi√™n', 'rau mu·ªëng x√†o',
           'th·ªãt kho', 'th·ªãt kho tr·ª©ng', 'tr·ª©ng chi√™n', 'ƒë·∫≠u h·ªß s·ªët c√† chua']

def normalize_text(text):
    return unicodedata.normalize('NFC', text)

with open('menu.json', 'r', encoding='utf-8') as f:
    menu_raw = json.load(f)
menu = {normalize_text(k): v for k, v in menu_raw.items()}

# === Khai b√°o bi·∫øn to√†n c·ª•c ===
root = tk.Tk()
dish_data = []
total = 0
cart_items = []
cart_total = tk.DoubleVar(value=0.0)
cart_subtotal = tk.DoubleVar(value=0.0)
cart_tax = tk.DoubleVar(value=0.0)

# --- Bi·∫øn to√†n c·ª•c ---
account_visible = False
customer_name = tk.StringVar(value="")   # T√™n kh√°ch h√†ng


# --- H√†m toggle account ---
def toggle_account_info():
    global account_visible
    if account_visible:
        account_frame.place_forget()
    else:
        account_frame.place(x=950, y=60)
        account_frame.lift()
    account_visible = not account_visible




# --- Header ---
header = tk.Frame(root, bg="lightblue", height=60)
header.pack(fill=tk.X, side=tk.TOP)

logo_label = tk.Label(header, text="üçΩ Food5 ", bg="orange", font=("Segoe UI", 16, "bold"))
logo_label.pack(side=tk.LEFT, padx=20)

account_btn = tk.Button(header, text="üë§ My Account", command=toggle_account_info)
account_btn.pack(side=tk.RIGHT, padx=20)

# --- Account Frame ---
account_frame = tk.Frame(root, bg="white", bd=2, relief=tk.RAISED)
account_frame.configure(width=250, height=100)


account_frame.pack_propagate(False)  # Gi·ªØ k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh


# === H√†m x·ª≠ l√Ω ·∫£nh ƒë·∫ßu v√†o ===
def process_image(image_path):
    global dish_data, total
    display_selected_image(image_path)

    # D√≤ t√¨m m√≥n ƒÉn trong ·∫£nh s·ª≠ d·ª•ng YOLO
    model(source=image_path, save=True, save_crop=True, imgsz=640, conf=0.15)

    # L·∫•y folder crop ·∫£nh m·ªõi nh·∫•t
    cropped_dirs = sorted(glob.glob('runs/detect/predict*/crops'), key=os.path.getmtime, reverse=True)
    if not cropped_dirs:
        print("Kh√¥ng t√¨m th·∫•y ·∫£nh crop.")
        return
    latest_cropped = cropped_dirs[0]

    dish_data.clear()
    total = 0

    for folder in os.listdir(latest_cropped):
        folder_path = os.path.join(latest_cropped, folder)
        if not os.path.isdir(folder_path):
            continue

        for img_name in os.listdir(folder_path):
            img_path = os.path.join(folder_path, img_name)

            # Ti·ªÅn x·ª≠ l√Ω ·∫£nh cho CNN
            img = image.load_img(img_path, target_size=(200, 200))
            img_array = image.img_to_array(img) / 255.0
            img_array = np.expand_dims(img_array, axis=0)

            prediction = cnn_model.predict(img_array)
            class_idx = np.argmax(prediction)
            dish_name = classes[class_idx]

            price = menu.get(normalize_text(dish_name), 0)

            total += price
            dish_data.append((img_path, dish_name, price))

    update_ui()

# === Hi·ªÉn th·ªã ·∫£nh ƒë√£ ch·ªçn l√™n giao di·ªán ===
def display_selected_image(image_path):
    pil_img = Image.open(image_path).resize((320, 240))
    tk_img = ImageTk.PhotoImage(pil_img)
    image_preview_label.configure(image=tk_img)
    image_preview_label.image = tk_img

# === M·ªü file ·∫£nh t·ª´ m√°y ===
def upload_image():
    file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.jpg *.jpeg *.png")])
    if file_path:
        process_image(file_path)

# === Ch·ª•p ·∫£nh t·ª´ webcam v√† x·ª≠ l√Ω ===
def capture_from_webcam():
    global webcam_active
    ret, frame = cap.read()
    if ret:
        webcam_active = False  # üö´ T·∫°m d·ª´ng webcam

        image_path = 'captured.jpg'
        cv2.imwrite(image_path, frame)

        # Hi·ªÉn th·ªã ·∫£nh v·ª´a ch·ª•p
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(frame_rgb)
        img = img.resize((540, 380))
        imgtk = ImageTk.PhotoImage(image=img)
        image_preview_label.imgtk = imgtk
        image_preview_label.configure(image=imgtk)

        # Ti·∫øp t·ª•c x·ª≠ l√Ω nh·∫≠n di·ªán
        process_image(image_path)

# === Lu·ªìng c·∫≠p nh·∫≠t webcam li√™n t·ª•c ===
webcam_active = True
def update_webcam():
    if not webcam_active:
        return
    ret, frame = cap.read()
    if ret:
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(frame_rgb)
        img = img.resize((540, 380))
        imgtk = ImageTk.PhotoImage(image=img)
        image_preview_label.imgtk = imgtk
        image_preview_label.configure(image=imgtk)
    root.after(10, update_webcam)


# === C·∫≠p nh·∫≠t UI m√≥n ƒÉn ƒë√£ nh·∫≠n di·ªán ===
def update():
    # C·∫≠p nh·∫≠t d·ªØ li·ªáu
    root.after(50, update)  # C·∫≠p nh·∫≠t m·ªói 50ms, tr√°nh lag
def update_ui():
    global total
    for widget in scrollable_frame.winfo_children():
        widget.destroy()

    cart_items.clear()
    total = 0

    for img_path, dish_name, price in dish_data:
        item_frame = ttk.Frame(scrollable_frame, padding=10)
        item_frame.pack(fill=tk.X)

        cart_items.append([dish_name, price, 1, img_path])

        pil_img = Image.open(img_path).resize((100, 100))
        tk_img = ImageTk.PhotoImage(pil_img)

        img_label = ttk.Label(item_frame, image=tk_img)
        img_label.image = tk_img
        img_label.pack(side=tk.LEFT)

        name_label = ttk.Label(item_frame, text=f"{dish_name} - {price:,} VND", font=("Segoe UI", 14))
        name_label.pack(side=tk.LEFT, padx=10)

        total += price

    
    update_cart_display()

# === C·∫≠p nh·∫≠t hi·ªÉn th·ªã gi·ªè h√†ng ===
def update_cart_display():
    cart_listbox.delete(0, tk.END)
    subtotal = sum([item[1] * item[2] for item in cart_items])
    tax = round(subtotal * 0.08, 2)
    total_price = subtotal + tax

    for name, price, qty, _ in cart_items:
        cart_listbox.insert(tk.END, f"{name} (x{qty}) - {price * qty:,.0f} VND")

    cart_subtotal.set(f"{subtotal:,.0f} VND")
    cart_tax.set(f"{tax:,.0f} VND")
    cart_total.set(f"{total_price:,.0f} VND")

# === C√°c n√∫t thao t√°c gi·ªè h√†ng ===
def remove_selected():
    selected = cart_listbox.curselection()
    if selected:
        cart_items.pop(selected[0])
        update_cart_display()

def update_quantity():
    selected = cart_listbox.curselection()
    if selected:
        cart_items[selected[0]][2] += 1
        update_cart_display()



# === Hi·ªÉn th·ªã c·ª≠a s·ªï QR code l·∫•y t·ª´ URL ===
def show_qr_code_from_file(file_path):
    if not os.path.exists(file_path):
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y m√£ QR.")
        return

    qr_window = tk.Toplevel(root)
    qr_window.title("M√£ QR Thanh To√°n")
    qr_window.geometry("300x300")
    qr_window.resizable(False, False)

    img = Image.open(file_path)
    img = img.resize((280, 280))
    tk_img = ImageTk.PhotoImage(img)

    label = tk.Label(qr_window, image=tk_img)
    label.image = tk_img
    label.pack(padx=10, pady=10)

      

        
# === C·∫≠p nh·∫≠t UI m√≥n ƒÉn ƒë√£ nh·∫≠n di·ªán ===
def update_ui():
    global total
    for widget in scrollable_frame.winfo_children():
        widget.destroy()

    cart_items.clear()
    total = 0

    for img_path, dish_name, price in dish_data:
        item_frame = ttk.Frame(scrollable_frame, padding=10)
        item_frame.pack(fill=tk.X)

        cart_items.append([dish_name, price, 1, img_path])

        pil_img = Image.open(img_path).resize((100, 100))
        tk_img = ImageTk.PhotoImage(pil_img)

        img_label = ttk.Label(item_frame, image=tk_img)
        img_label.image = tk_img
        img_label.pack(side=tk.LEFT)

        name_label = ttk.Label(item_frame, text=f"{dish_name} - {price:,} VND", font=("Segoe UI", 14))
        name_label.pack(side=tk.LEFT, padx=10)

        total += price

    update_cart_display()

# === C·∫≠p nh·∫≠t hi·ªÉn th·ªã gi·ªè h√†ng ===
def update_cart_display():
    cart_listbox.delete(0, tk.END)
    subtotal = sum([item[1] * item[2] for item in cart_items])
    tax = round(subtotal * 0.08, 2)
    total_price = subtotal + tax

    for name, price, qty, _ in cart_items:
        cart_listbox.insert(tk.END, f"{name} (x{qty}) - {price * qty:,.0f} VND")

    cart_subtotal.set(f"{subtotal:,.0f} VND")
    cart_tax.set(f"{tax:,.0f} VND")
    cart_total.set(f"{total_price:,.0f} VND")

# === C√°c n√∫t thao t√°c gi·ªè h√†ng ===
def remove_selected():
    selected = cart_listbox.curselection()
    if selected:
        cart_items.pop(selected[0])
        update_cart_display()
        
def update_quantity():
    selected = cart_listbox.curselection()
    if selected:
        cart_items[selected[0]][2] += 1
        update_cart_display()

def cancel_order():
    global webcam_active
    if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n h√†ng kh√¥ng?"):
        cart_items.clear()
        update_cart_display()
        
    
        
        

def checkout():
    global webcam_active
    subtotal = sum([item[1] * item[2] for item in cart_items])
    tax = round(subtotal * 0.08, 2)
    total_price = subtotal + tax
    messagebox.showinfo("Thanh to√°n", f"T·ªïng ti·ªÅn ph·∫£i thanh to√°n: {total_price:,.0f} VND\nC·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!")

    qr_path = "qr_bank.jpg"
    show_qr_code_from_file(qr_path)

    cart_items.clear()
    update_cart_display()

    
    

def logout():
    messagebox.showinfo("Logout", "B·∫°n ƒë√£ ƒëƒÉng xu·∫•t!")
    #"""H√†m x·ª≠ l√Ω ƒëƒÉng xu·∫•t v√† x√≥a b·ªô nh·ªõ"""
    mssv_label.config(text="MSSV: ")  # X√≥a n·ªôi dung ƒë√£ nh·∫≠p
    name_label.config(text="H·ªç t√™n: ")  # X√≥a n·ªôi dung ƒë√£ nh·∫≠p   

    
    

def reset_detection():
    """H√†m reset danh s√°ch m√≥n ƒÉn nh·∫≠n di·ªán"""
    for widget in scrollable_frame.winfo_children():
        widget.destroy()

    
def reset_all():
    global webcam_active

    # X√≥a to√†n b·ªô m√≥n ƒÉn ƒë√£ nh·∫≠n di·ªán
    dish_data.clear()
    cart_items.clear()
    update_cart_display()

    # X√≥a n·ªôi dung hi·ªÉn th·ªã trong v√πng m√≥n ƒÉn
    for widget in scrollable_frame.winfo_children():
        widget.destroy()

    # X√≥a th∆∞ m·ª•c crop YOLO c≈© (n·∫øu mu·ªën)
    for folder in glob.glob('runs/detect/predict*'):
        try:
            import shutil
            shutil.rmtree(folder)
        except Exception as e:
            print(f"L·ªói khi x√≥a folder {folder}: {e}")

    # K√≠ch ho·∫°t l·∫°i webcam
    webcam_active = True
    update_webcam()


# === Giao di·ªán ch√≠nh ===
root.title("üçΩ Automatic calculate food bill")
root.geometry("1200x800")
root.configure(bg="#000080")

# Bi·∫øn l∆∞u th√¥ng tin t·ªïng ti·ªÅn
cart_items = []
cart_total = tk.DoubleVar(value=0.0)
cart_subtotal = tk.DoubleVar(value=0.0)
cart_tax = tk.DoubleVar(value=0.0)

style = ttk.Style()
style.configure("TFrame", background="#f0f0f0")
style.configure("TLabel", background="#f0f0f0", font=("Segoe UI", 11))
style.configure("TButton", font=("Segoe UI", 11), padding=6)
style.configure("TLabelframe", font=("Segoe UI", 12, "bold"))
style.configure("TLabelframe.Label", background="#f0f0f0", foreground="#333333")

# === Webcam init ===
cap = cv2.VideoCapture(0)

# === V√ôNG CH√çNH ===
main_frame = ttk.Frame(root)
main_frame.pack(fill=tk.BOTH, expand=True)

# === V√ôNG TR√ÅI ===
left_frame = ttk.Frame(main_frame)
left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=20, pady=20)


# Khung ngang ch·ª©a webcam v√† m√≥n ƒÉn nh·∫≠n di·ªán
top_horizontal_frame = ttk.Frame(left_frame)
top_horizontal_frame.pack(fill=tk.BOTH, expand=True)

# Webcam view (thu nh·ªè)
preview_frame = ttk.LabelFrame(top_horizontal_frame, text="üì∑ Webcam (320x240)")
preview_frame.pack(side=tk.LEFT, padx=5, pady=5, fill=tk.BOTH, expand=True)

image_preview_label = ttk.Label(preview_frame)
image_preview_label.pack(padx=5, pady=5, fill=tk.BOTH, expand=True)

# M√≥n ƒÉn nh·∫≠n di·ªán (chuy·ªÉn sang b√™n tr√°i c·∫°nh webcam)
detection_frame = ttk.LabelFrame(top_horizontal_frame, text="üçõ M√≥n ƒÉn nh·∫≠n di·ªán")
detection_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)

canvas = tk.Canvas(detection_frame, background="#ffffff", highlightthickness=0)
scrollbar = ttk.Scrollbar(detection_frame, orient=tk.VERTICAL, command=canvas.yview)
scrollable_frame = ttk.Frame(canvas)

scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)

canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)


# Khung combo menu d∆∞·ªõi webcam
combo_frame = ttk.LabelFrame(left_frame, text="üç± Combo Menu")
combo_frame.pack(padx=5, pady=10, fill=tk.X)

# Danh s√°ch combo m·∫´u
combos = [
    {"name": "Combo A", "items": ["C∆°m tr·∫Øng", "Rau mu·ªëng x√†o", "Th·ªãt kho tr·ª©ng"], "price": "35.000 VND", "img": "image 20.png"},
    {"name": "Combo B", "items": ["C∆°m tr·∫Øng", "Rau mu·ªëng x√†o", "ƒê·∫≠u h·ªß s·ªët c√†"], "price": "30.000 VND", "img": "image 21.png"},
    {"name": "Combo C", "items": ["C∆°m tr·∫Øng", "Rau mu·ªëng x√†o", "G√† chi√™n"], "price": "38.000 VND", "img": "m·∫´u.jpg"},
    {"name": "Combo D", "items": ["C∆°m tr·∫Øng", "Rau mu·ªëng x√†o", "Tr·ª©ng chi√™n"], "price": "38.000 VND", "img": "14.jpg"},
]
def create_combo_card(parent, combo):
    card = ttk.Frame(parent, relief="ridge", borderwidth=2, padding=5)
    card.pack(side=tk.LEFT, padx=10, pady=5)

    # ·∫¢nh combo
    if os.path.exists(combo["img"]):
        img = Image.open(combo["img"]).resize((80, 80))
        photo = ImageTk.PhotoImage(img)
        label_img = ttk.Label(card, image=photo)
        label_img.image = photo
        label_img.pack()

    # T√™n combo
    ttk.Label(card, text=combo["name"], font=("Segoe UI", 12, "bold")).pack(pady=2)

    # M√≥n ƒÉn combo (g√≥i g·ªçn)
    ttk.Label(card, text=", ".join(combo["items"]), font=("Segoe UI", 9), wraplength=150).pack()

    # Gi√° combo
    #ttk.Label(card, text=combo["price"], foreground="green", font=("Segoe UI", 10, "bold")).pack(pady=2)

for combo in combos:
    create_combo_card(combo_frame, combo)


# N√∫t ch·ª©c nƒÉng
btn_frame = ttk.Frame(left_frame)
btn_frame.pack(pady=10)

ttk.Button(btn_frame, text="üì∏ Let's Check", command=capture_from_webcam).grid(row=0, column=0, padx=12)
ttk.Button(btn_frame, text="üìÅ Upload Image", command=upload_image).grid(row=0, column=1, padx=12)
ttk.Button(btn_frame, text="Reset", command=reset_all).grid(row=0, column=2, padx=12)

# === V√ôNG PH·∫¢I ===
right_frame = ttk.Frame(main_frame, width=480)
right_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=20, pady=20)
right_frame.pack_propagate(False)  # Gi·ªØ k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh




# --- Customer Info Frame (tr√™n gi·ªè h√†ng, b√™n ph·∫£i) ---
customer_info_frame = tk.Frame(right_frame, bg="white")
customer_info_frame.pack(fill=tk.X, padx=10, pady=(10, 0))

# Entry nh·∫≠p th√¥ng tin MSSV & h·ªç t√™n
tk.Label(customer_info_frame, text="Enter your student ID:", bg="white").pack(anchor='w', padx=5)
mssv_entry = tk.Entry(customer_info_frame)
mssv_entry.pack(fill=tk.X, padx=5)

tk.Label(customer_info_frame, text="Enter your name:", bg="white").pack(anchor='w', padx=5, pady=(5, 0))
name_entry = tk.Entry(customer_info_frame)
name_entry.pack(fill=tk.X, padx=5)

# H√†m x·ª≠ l√Ω x√°c nh·∫≠n
def confirm_customer_info():
    mssv = mssv_entry.get().strip()
    name = name_entry.get().strip()
    if mssv:
        mssv_label.config(text=f"MSSV: {mssv}")
    if name:
        name_label.config(text=f"H·ªç t√™n: {name}")

# N√∫t x√°c nh·∫≠n
tk.Button(customer_info_frame, text="Confirm", command=confirm_customer_info).pack(fill=tk.X, padx=5, pady=5)




# Hi·ªÉn th·ªã th√¥ng tin ƒë√£ nh·∫≠p
mssv_label = tk.Label(account_frame, text="MSSV: ", bg="white")
mssv_label.pack(anchor='w', padx=10)

name_label = tk.Label(account_frame, text="H·ªç t√™n: ", bg="white")
name_label.pack(anchor='w', padx=10)

points_label = tk.Label(account_frame, text="‚≠ê ƒêi·ªÉm th∆∞·ªüng: 0", bg="white")
points_label.pack(anchor='w', padx=10)

# ƒêi·ªÉm t√≠ch l≈©y v√† n√∫t ƒëƒÉng xu·∫•t

tk.Button(account_frame, text="Log-out", bg="red", fg="white", command=logout).pack(fill=tk.X, padx=10, pady=(0, 10))






# Gi·ªè h√†ng
cart_frame = ttk.LabelFrame(right_frame, text="üõí Cart")
cart_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

cart_listbox = tk.Listbox(cart_frame, height=10, font=("Segoe UI", 11))
cart_listbox.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

# C√°c n√∫t thao t√°c gi·ªè h√†ng
button_frame = tk.Frame(cart_frame)
button_frame.pack(pady=5)

ttk.Button(button_frame, text="üóë Remove", command=remove_selected).grid(row=0, column=0, padx=10)
ttk.Button(button_frame, text="‚ûï Add", command=update_quantity).grid(row=0, column=1, padx=10)
ttk.Button(button_frame, text="üí≥ Pay", command=checkout).grid(row=1, column=1, padx=10)
ttk.Button(button_frame, text="‚ùå Cancel",  command=cancel_order).grid(row=1, column=0, padx=10)

# T·ªïng ti·ªÅn chi ti·∫øt
total_info_frame = ttk.Frame(cart_frame)
total_info_frame.pack(pady=5)

ttk.Label(total_info_frame, text="Subtotal:").grid(row=0, column=0, padx=8, sticky='e')
ttk.Label(total_info_frame, textvariable=cart_subtotal).grid(row=0, column=1, sticky='w')
ttk.Label(total_info_frame, text="VAT (8%):").grid(row=1, column=0, padx=8, sticky='e')
ttk.Label(total_info_frame, textvariable=cart_tax).grid(row=1, column=1, sticky='w')
ttk.Label(total_info_frame, text="üßæ Total:", font=("Segoe UI", 12, "bold")).grid(row=2, column=0, padx=8, sticky='e')
ttk.Label(total_info_frame, textvariable=cart_total, foreground="red", font=("Segoe UI", 14, "bold")).grid(row=2, column=1, sticky='w')

# B·∫Øt ƒë·∫ßu webcam
update_webcam()
root.mainloop()
cap.release()
cv2.destroyAllWindows()



